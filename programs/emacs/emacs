;;; emacs init file

(require 'package)

(add-to-list 'package-archives '("gnu" . "http://elpa.gnu.org/packages/"))
(add-to-list 'package-archives '("org" . "https://orgmode.org/elpa/") t)
(add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/") t)
(add-to-list 'package-archives '("melpa-stable" . "http://stable.melpa.org/packages/") t)
(let* ((no-ssl (and (memq system-type '(windows-nt ms-dos))
                    (not (gnutls-available-p))))
       (proto (if no-ssl "http" "https")))
  (add-to-list 'package-archives
               (cons "melpa" (concat proto "://melpa.org/packages/")) t))
(package-initialize)

;; misc.
(require 'xclip)
(xclip-mode 1)

(menu-bar-mode -1)
(tool-bar-mode -1)
(defun my/disable-scroll-bars (frame)
  (modify-frame-parameters frame
			   '((vertical-scroll-bars . nil)
			     (horizontal-scroll-bars . nil))))
(add-hook 'after-make-frame-functions 'my/disable-scroll-bars)

(cua-mode 1)

;; dired
(require 'all-the-icons)
(use-package dired-sidebar
  :bind (("M-d" . dired-sidebar-toggle-with-current-directory)))

(use-package dired-subtree
  :config
  (bind-keys :map dired-mode-map
	     ("SPC" . dired-icons-subtree-toggle)))

(defun dired-icons-subtree-toggle ()
  (interactive)
  (dired-subtree-toggle)
  (revert-buffer))

(add-hook 'dired-mode-hook
	  (lambda ()
            (dired-hide-details-mode)
            (dired-hide-dotfiles-mode)))
(add-hook 'dired-mode-hook 'all-the-icons-dired-mode)

(define-key dired-mode-map "." #'dired-hide-dotfiles-mode)

;; backup files
(setq backup-directory-alist `(("." . ,(expand-file-name "tmp/backups/" user-emacs-directory))))

;; abbreviations
(use-package agda-input
  :config (setq default-input-method "Agda")
  :load-path "~/.emacs.d/lisp"
  :defer 5
  :custom
  (default-input-method "Agda")
  (agda-input-user-translations
   '(("Phi" "Φ")
     ("phi" "φ")))
  ;; ("t" "▵" "▿" "▴"  "▾" "◂" "◃" "▸" "▹"  "◄" "◅" "►" "▻" "◢" "◿" "◣" "◺" "◤" "◸" "◥" "◹")))
  (default-input-method "Agda"))

(setq split-width-threshold 1)

(put 'dired-find-alternate-file 'disabled nil)
(add-hook 'dired-mode-hook (lambda () (local-set-key (kbd "<mouse-2>") #'dired-find-alternate-file)))

;; (use-package est)
;; (est-gruvbox-dark)

(load-theme 'gruvbox t)

(require 'airline-themes)
;; ;; (load-theme 'airline-gruvbox-dark t)
(load-theme 'airline-base16_gruvbox_dark_hard t)
(setq airline-cursor-column t)

(setq custom-file "~/.emacs.d/emacs-custom.el")

(setq column-number-mode t)

;; evil
;; (setq evil-want-keybinding nil)
(evil-mode 1)
;; (evil-collection-init 'xref)


;; line wrap at 80 chars
;; (add-hook 'text-mode-hook #'auto-fill-mode)
(setq-default fill-column 80)

;; line-number mode
(set-face-attribute 'line-number nil :background "#282828")
(set-face-attribute 'line-number-current-line nil :background "#282828")
(set-face-attribute 'line-number nil :foreground "#504945")
(set-face-attribute 'line-number-current-line nil :foreground "#d5c4a1")
(global-set-key (kbd "C-c n") 'display-line-numbers-mode)

(require 'fill-column-indicator)
(global-set-key (kbd "C-c r") 'fci-mode)
(setq fci-rule-column 80)
(setq fci-rule-color "#cc241d")
(setq fci-rule-width 2)

;; text-mode hooks
(dolist (hook '(text-mode-hook))
  (add-hook hook (lambda () (flyspell-mode 1))))

(defun insert-math ()
  (interactive)
  (insert "\\(\\)")
  (backward-char 2))

(defun add-text-mode-insert-math-binding ()
   (local-set-key (kbd "C-x m") #'insert-math))
(add-hook 'text-mode-hook #'add-text-mode-insert-math-binding)

;; opening pdfs
(require 'openwith)
(openwith-mode t)
(setq openwith-associations '(("\\.pdf\\'" "zathura" (file))))

;; mu4e
(require 'mu4e)
;; (setq mu4e-mu-binary "~/.nix-profile/bin/mu")
(setq mu4e-mu-binary "/nix/var/nix/profiles/default/bin/mu")
;; (require 'nerd-icons)
(require 'mu4e-marker-icons)
(mu4e-marker-icons-mode 1)

(setq mail-user-agent 'mu4e-user-agent)

(setq mu4e-drafts-folder "/gmail/drafts")
(setq mu4e-sent-folder "/gmail/sent")
(setq mu4e-trash-folder "/gmail/trash")

(add-hook 'mu4e-compose-mode-hook #'(lambda () (auto-save-mode -1)))
(setq mu4e-sent-messages-behavior 'delete)
(setq mu4e-get-mail-command "mbsync -a")

(setq
 user-mail-address "julian.grove@gmail.com"
 user-full-name "Julian Grove"
 mu4e-compose-signature
 (concat "Julian Grove\n"
	 "julian.grove@gmail.com\n"
	 "juliangrove.github.io\n"
	 "sent via mu4e"))

(require 'smtpmail)

(setq message-send-mail-function 'smtpmail-send-it
      starttls-use-gnutls t
      smtpmail-starttls-credentials '(("smtp.gmail.com" 587 nil nil))
      smtpmail-auth-credentials
      '(("smtp.gmail.com" 587 "julian.grove@gmail.com" nil))
      smtpmail-default-smtp-server "smtp.gmail.com"
      smtpmail-smtp-server "smtp.gmail.com"
      smtpmail-smtp-service 587)

(setq message-kill-buffer-on-exit t)

(setq mu4e-view-show-images t
      mu4e-view-image-max-width 800)

(defun no-auto-fill ()
  "Turn off auto-fill-mode."
  (auto-fill-mode -1))


(add-hook 'mu4e-compose-mode-hook #'no-auto-fill)

(add-to-list 'mm-inhibit-file-name-handlers 'openwith-file-handler)

(with-eval-after-load "emojify"
  (delete 'mu4e-headers-mode emojify-inhibit-major-modes))

(add-hook 'mu4e-view-mode-hook #'emojify-mode)

;; latex
(setq-default TeX-PDF-mode t)
(setq-default TeX-master t)
(setq latex-run-command "pdflatex")
(setq TeX-command-extra-options "-shell-escape")
(setq shift-select-mode t)
(setq TeX-parse-self nil)			; Don't enable parse on load.
(setq TeX-auto-save nil)			; Don't enable parse on save.
(setq latex-run-command "pdflatex")
(setq TeX-command-extra-options "-shell-escape")
(setq TeX-view-program-selection '((output-pdf "PDF Viewer")))

;; Zathura as latex pdf viewer
(setq TeX-view-program-list '(("Zathura" "zathura %u")))

(add-hook 'LaTeX-mode-hook '(lambda ()
			      (add-to-list 'TeX-expand-list
					   '("%u" pdf-make-url))))
(defun pdf-make-url () (concat
			"file://\""
			(expand-file-name (funcall file (TeX-output-extension) t)
					  (file-name-directory (TeX-master-file)))
			"\"#src:"
			(TeX-current-line)
			"\""
			(expand-file-name (TeX-master-directory))
			"./"
			(TeX-current-file-name-master-relative)
			"\""))
(setq TeX-view-program-selection '((output-pdf "Zathura")))

;; flycheck
(use-package flycheck
  :init (global-flycheck-mode))

;; (setq flycheck-command-wrapper-function
;; (lambda (command) (apply 'nix-shell-command (nix-current-sandbox) command))
;; flycheck-executable-find
;; (lambda (cmd) (nix-executable-find (nix-current-sandbox) cmd)))

;; haskell
(require 'haskell-mode)
(custom-set-variables '(haskell-process-type 'cabal-repl))
(require 'haskell-interactive-mode)
(require 'haskell-process)
(custom-set-variables
 '(haskell-process-suggest-remove-import-lines t)
 '(haskell-process-auto-import-loaded-modules t)
 '(haskell-process-log t))
(add-hook 'haskell-mode-hook 'interactive-haskell-mode)

(defun insert-pragma ()
  (interactive)
  (insert "{-# LANGUAGE  #-}\n")
  (backward-char 5))
(defun add-haskell-pragma-binding ()
   (local-set-key (kbd "C-x p") #'insert-pragma))
(add-hook 'haskell-mode-hook #'add-haskell-pragma-binding)

(defun insert-brackets ()
  (interactive)
  (insert "{-#  #-}")
  (backward-char 4))
(defun add-haskell-brackets-binding ()
   (local-set-key (kbd "C-x r") #'insert-brackets))
(add-hook 'haskell-mode-hook #'add-haskell-brackets-binding)

(defun insert-repl ()
  (interactive)
  (insert "-- >>> \n")
  (backward-char 1))
(defun add-haskell-repl-binding ()
   (local-set-key (kbd "C-x i") #'insert-repl))

(use-package dante
  :after haskell-mode
  :commands 'dante-mode
  :init
  (add-hook 'haskell-mode-hook 'flycheck-mode)
  (add-hook 'haskell-mode-hook 'dante-mode)
  (add-hook 'haskell-mode-hook #'add-haskell-repl-binding))
(setq dante-debug '(inputs outputs responses))
(setq dante-repl-command-line '("nix-shell" "--run" "cabal repl"))
(use-package attrap
  :ensure t
  :bind (("C-x /" . attrap-attrap))) ;; use any binding of your choice


;; ocaml
(require 'ocp-indent)
(use-package tuareg
  :config
  ;; (add-hook 'tuareg-mode-hook #'electric-pair-local-mode)
  ;; (add-hook 'tuareg-mode-hook 'tuareg-imenu-set-imenu)
  (add-hook 'tuareg-mode-hook
	    (lambda () (add-hook 'before-save-hook 'ocp-indent-buffer nil t)
	      (merlin-mode)))
  (setq auto-mode-alist
	(append '(("\\.ml[ily]?$" . tuareg-mode)
                  ("\\.topml$" . tuareg-mode))
		auto-mode-alist)))
(use-package merlin
  :config
  (add-hook 'tuareg-mode-hook 'merlin-mode)
  (add-hook 'merlin-mode-hook #'company-mode)
  (add-hook 'caml-mode-hook 'merlin-mode)
  (setq merlin-error-after-save nil))
(use-package utop
  :config
  (autoload 'utop-minor-mode "utop" "Minor mode for utop" t)
  (add-hook 'tuareg-mode-hook 'utop-minor-mode)
  (define-key utop-mode-map (kbd "S-<up>") 'utop-history-goto-prev)
  (define-key utop-mode-map (kbd "S-<down>") 'utop-history-goto-next))

;; coq
(add-hook 'coq-mode-hook 'coq-commenter-mode)

;; prolog
(setq auto-mode-alist (append '(("\\.pl\\'" . prolog-mode))
			      auto-mode-alist))
(setq prolog-system 'swi)
(autoload 'run-prolog "pl" "Run an inferior prolog process" t)
(autoload 'prolog-mode "prolog" "SWI-Prolog mode" t)

;; python
(elpy-enable)

;; R
(require 'ess-r-mode)

;;; stan-mode.el
(use-package stan-mode
  :mode ("\\.stan\\'" . stan-mode)
  :hook (stan-mode . stan-mode-setup)
  
  :config
  ;; The officially recommended offset is 2.
  (setq stan-indentation-offset 2))

;;; company-stan.el
(use-package company-stan
  :hook (stan-mode . company-stan-setup)
  ;;
  :config
  ;; Whether to use fuzzy matching in `company-stan'
  (setq company-stan-fuzzy nil))

;;; eldoc-stan.el
(use-package eldoc-stan
  :hook (stan-mode . eldoc-stan-setup)
  ;;
  :config
  ;; No configuration options as of now.
  )

;;; flycheck-stan.el
(use-package flycheck-stan
  ;; Add a hook to setup `flycheck-stan' upon `stan-mode' entry
  :hook ((stan-mode . flycheck-stan-stanc2-setup)
         (stan-mode . flycheck-stan-stanc3-setup))
  :config
  ;; A string containing the name or the path of the stanc2 executable
  ;; If nil, defaults to `stanc2'
  (setq flycheck-stanc-executable nil)
  ;; A string containing the name or the path of the stanc2 executable
  ;; If nil, defaults to `stanc3'
  (setq flycheck-stanc3-executable nil))

;;; stan-snippets.el
(use-package stan-snippets
  :hook (stan-mode . stan-snippets-initialize)
  ;;
  :config
  ;; No configuration options as of now.
  )

;; org
(setq org-startup-truncated nil)

(global-set-key (kbd "C-c l") 'org-store-link)
(global-set-key (kbd "C-c a") 'org-agenda)
(global-set-key (kbd "C-c c") 'org-capture)

;; headers
(require 'org-superstar)
(add-hook 'org-mode-hook (lambda () (org-superstar-mode 1)))
(setq org-superstar-leading-bullet ?\s)
(setq org-superstar-headline-bullets-list '("◉" "○" "●" "○" "●" "○" "●" "○"))

(let* ((headline `(:inherit default :weight bold)))
  (custom-theme-set-faces 'user
			  `(org-level-8 ((t (,@headline))))
			  `(org-level-7 ((t (,@headline))))
			  `(org-level-6 ((t (,@headline))))
			  `(org-level-5 ((t (,@headline))))
			  `(org-level-4 ((t (,@headline))))
			  `(org-level-3 ((t (,@headline))))
			  `(org-level-2 ((t (,@headline))))
			  `(org-level-1 ((t (,@headline))))
			  `(org-document-title ((t (,@headline :underline nil))))))

;; emphasis markers
(setq org-hide-emphasis-markers t)

;; bullets
;; (font-lock-add-keywords 'org-mode
			;; '(("^ +\\([-*]\\) "
			   ;; (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

;; org latex
(require 'org-inlinetask)
(require 'ox-latex)
(require 'ox-beamer)
(setq org-latex-listings 'minted)
(require 'org-ref)

;; (with-eval-after-load 'org
  ;; (add-hook 'org-mode-hook 'org-ref-prettify-mode))

;; (require 'ox-bibtex)

(setq compile-command "make clean && make -k")

;; org-gcal
(setq org-agenda-files (list "~/.emacs.d/gcal.org"))

(require 'json)
(defun get-gcal-config-value (key)
  (cdr (assoc key (json-read-file "~/.emacs.d/gcal-secret.json"))))

;; (require 'org-gcal)
;; (setq org-gcal-client-id (get-gcal-config-value 'client_id)
      ;; org-gcal-client-secret (get-gcal-config-value 'client_secret)
      ;; org-gcal-file-alist '(("juliangrove@gmail.com" . "~/.emacs.d/gcal.org")))

(defun my-org-gcal-fetch (&optional arg)
  (interactive "P")
  (let ((browse-url-browser-function #'browse-url-firefox))
    (org-gcal-fetch)))

(add-hook 'org-agenda-mode-hook (lambda () (org-gcal-sync)))
(add-hook 'org-capture-after-finalize-hook (lambda () (org-gcal-sync)))

;; (setq org-capture-templates
      ;; '(("a" "Appointment" entry (file  "~/.emacs.d/gcal.org")
	 ;; "* %?\n\n%^T\n\n:PROPERTIES:\n\n:END:\n\n")))

;; org-agenda
;; (setq org-agenda-files (list "~/.emacs.d/gcal.org"))

;; calfw
(require 'calfw)
(require 'calfw-org)
(require 'calfw-gcal)

(defun schedule ()
  (interactive)
  (cfw:open-org-calendar))

(set-frame-font "DejaVu Sans Mono-12")
(setq default-frame-alist '((font . "DejaVu Sans Mono-12")))

;; (set-frame-font "JetBrains Mono-9")
;; (setq default-frame-alist '((font . "JetBrains Mono-9")))

;; nixos
(require 'nix-mode)
(add-to-list 'auto-mode-alist '("\\.nix\\'" . nix-mode))
(add-hook 'nix-mode-hook 'nixpkgs-fmt-on-save-mode)
(define-key nix-mode-map (kbd "C-c C-f") 'nixpkgs-fmt)

;; direnv
(require 'direnv)

;; pdf viewer
;; (pdf-loader-install)
;; (add-hook 'TeX-after-compilation-finished-functions #'TeX-revert-document-buffer)

;; markdown
(use-package markdown-mode
  :commands (markdown-mode gfm-mode)
  :mode (("README\\.md\\'" . gfm-mode)
         ("\\.md\\'" . markdown-mode)
         ("\\.markdown\\'" . markdown-mode))
  :init (setq markdown-command "multimarkdown"))

;; octave
;; (require 'ac-octave)
;; (add-hook 'octave-mode-hook
;;           '(lambda () (ac-octave-setup)))

;; agda
(use-package agda2-mode
  :mode ("\\.agda\\'" "\\.lagda.md\\'")
  :config
  (setq agda2-change-default-font nil)
  (setq agda2-fontset-name nil)
  (setq agda2-program-args '("-l" "standard-library" "-l" "cubical" "-i.")) ;; new way to load libraries. -i. allows to look for the current dir (otherwise nothing can be loaded.)
  ;; (setq agda2-program-args (list (concat "--include-path=" (expand-file-name "~/.nix-profile/share/agda/"))))
  ;; taken care of by nixpkgs (load-file (let ((coding-system-for-read 'utf-8)) (shell-command-to-string "agda-mode locate")))
  (progn ;; xref support
    (defun agda2--xref-backend () "agda2 xref backend." (when (eq major-mode 'agda2-mode) 'agda2))
    (cl-defmethod xref-backend-identifier-at-point ((_backend (eql agda2)))
      (point))

    (cl-defmethod xref-backend-identifier-completion-table ((_backend (eql agda2)))
      nil)

    (cl-defmethod xref-backend-definitions ((_backend (eql agda2)) source-pos)
      (let* ((target (get-text-property source-pos 'annotation-goto))
             (fname (car target))
             (buf (get-file-buffer fname))
             (pnt (cdr target)))
        (list (xref-make "definiton" (xref-make-buffer-location buf pnt)))))

    (add-hook 'xref-backend-functions 'agda2--xref-backend)))

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(haskell-process-auto-import-loaded-modules t)
 '(haskell-process-log t)
 '(haskell-process-suggest-remove-import-lines t)
 '(haskell-process-type 'cabal-repl))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(agda2-highlight-bound-variable-face ((t (:foreground "#ebdbb2"))))
 '(agda2-highlight-datatype-face ((t (:foreground "#458588"))))
 '(agda2-highlight-function-face ((t (:foreground "#458588"))))
 '(agda2-highlight-inductive-constructor-face ((t (:foreground "#98971a"))))
 '(agda2-highlight-keyword-face ((t (:foreground "#d79921"))))
 '(agda2-highlight-module-face ((t (:foreground "#b16286"))))
 '(agda2-highlight-postulate-face ((t (:foreground "#076678"))))
 '(agda2-highlight-primitive-face ((t (:foreground "#83a598"))))
 '(agda2-highlight-record-face ((t (:foreground "#076678"))))
 '(agda2-highlight-symbol-face ((t (:foreground "#a89984"))))
 '(font-lock-comment-face ((t (:foreground "#928374"))))
 '(org-document-title ((t (:inherit default :weight bold :underline nil))))
 '(org-level-1 ((t (:inherit default :weight bold))))
 '(org-level-2 ((t (:inherit default :weight bold))))
 '(org-level-3 ((t (:inherit default :weight bold))))
 '(org-level-4 ((t (:inherit default :weight bold))))
 '(org-level-5 ((t (:inherit default :weight bold))))
 '(org-level-6 ((t (:inherit default :weight bold))))
 '(org-level-7 ((t (:inherit default :weight bold))))
 '(org-level-8 ((t (:inherit default :weight bold))))
 '(proof-locked-face ((t (:extend t :background "#076678")))))

;; babel
(org-babel-do-load-languages
 'org-babel-load-languages
 '((emacs-lisp . t)
   (latex . t)
   (shell . t)
   (haskell . t)
   (python . t)
   (maxima . t)))

;; (set-face-attribute 'org-meta-line nil :height 0.9 :slant 'normal)
(set-face-attribute 'org-block-begin-line nil :foreground "#665c54" :height 0.9 :slant 'normal)
(set-face-attribute 'org-block-end-line nil :foreground "#665c54" :height 0.9 :slant 'normal)

;; dumb-jump ;; deprecated; use xref instead
;; (use-package dumb-jump
;;   :ensure t
;;   :bind (("M-g o" . dumb-jump-go-other-window)
;;          ("M-g j" . dumb-jump-go)
;;          ("M-g b" . dumb-jump-back)
;;          ("M-g q" . dumb-jump-quick-look)
;;          ("M-g x" . dumb-jump-go-prefer-external)
;;          ("M-g z" . dumb-jump-go-prefer-external-other-window)))

;; gnuplot-mode
(require 'gnuplot-mode)
(setq gnuplot-program "~/.nix-profile/bin/gnuplot")
(setq auto-mode-alist 
(append '(("\\.\\(gp\\|gnuplot\\)$" . gnuplot-mode)) auto-mode-alist))

;; ledger-mode
(require 'ledger-mode)
