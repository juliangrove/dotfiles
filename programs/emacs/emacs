(require 'package)

(add-to-list 'package-archives '("gnu" . "http://elpa.gnu.org/packages/"))
(add-to-list 'package-archives '("org" . "https://orgmode.org/elpa/") t)
(add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/") t)
(add-to-list 'package-archives '("melpa-stable" . "http://stable.melpa.org/packages/") t)
(let* ((no-ssl (and (memq system-type '(windows-nt ms-dos))
                    (not (gnutls-available-p))))
       (proto (if no-ssl "http" "https")))
  (add-to-list 'package-archives
               (cons "melpa" (concat proto "://melpa.org/packages/")) t))
(package-initialize)

(require 'xclip)
(xclip-mode 1)

(menu-bar-mode -1)
(tool-bar-mode -1)
(defun my/disable-scroll-bars (frame)
  (modify-frame-parameters frame
                           '((vertical-scroll-bars . nil)
                             (horizontal-scroll-bars . nil))))
(add-hook 'after-make-frame-functions 'my/disable-scroll-bars)

(cua-mode 1)


;; abbreviations
(use-package agda-input
  :config (setq default-input-method "Agda"))
(use-package agda-input
  :load-path "~/.emacs.d/lisp"
  :defer 5
  :config
  :custom
  (default-input-method "Agda")
  (agda-input-user-translations
   '(("Phi" "Φ")
     ("phi" "φ")))
     ;; ("t" "▵" "▿" "▴"  "▾" "◂" "◃" "▸" "▹"  "◄" "◅" "►" "▻" "◢" "◿" "◣" "◺" "◤" "◸" "◥" "◹")))
  (default-input-method "Agda"))

(setq split-width-threshold 1)

(put 'dired-find-alternate-file 'disabled nil)
(add-hook 'dired-mode-hook (lambda () (local-set-key (kbd "<mouse-2>") #'dired-find-alternate-file)))

(load-theme 'gruvbox t)

(require 'airline-themes)
(load-theme 'airline-gruvbox-dark t)
(setq airline-cursor-column t)

(setq column-number-mode t)

;; evil
;; (setq evil-want-keybinding nil)
(require 'evil)
(evil-mode 1)
;; (evil-collection-init)

(global-linum-mode t)
(add-hook 'pdf-view-mode-hook (lambda() (linum-mode -1)))

;; line wrap at 80 chars
(add-hook 'text-mode-hook #'auto-fill-mode)
(setq-default fill-column 80)

(require 'fill-column-indicator)
(global-set-key (kbd "C-c r") 'fci-mode)
(setq fci-rule-column 80)
(setq fci-rule-color "#cc241d")
(setq fci-rule-width 2)

;; text-mode hooks
(dolist (hook '(text-mode-hook))
  (add-hook hook (lambda () (flyspell-mode 1))))

;; opening pdfs
(require 'openwith)
(openwith-mode t)
(setq openwith-associations '(("\\.pdf\\'" "zathura" (file))))

;; mu4e
(require 'mu4e)

(setq mail-user-agent 'mu4e-user-agent)

(setq mu4e-drafts-folder "/gmail/drafts")
(setq mu4e-sent-folder "/gmail/sent")
(setq mu4e-trash-folder "/gmail/trash")

(setq mu4e-sent-messages-behavior 'delete)
(setq mu4e-get-mail-command "mbsync -a")

(setq
  user-mail-address "julian.grove@gmail.com"
  user-full-name "Julian Grove"
  mu4e-compose-signature
  (concat "Julian Grove\n"
	  "julian.grove@gmail.com\n"
	  "juliangrove.github.io\n"
	  "sent via mu4e"))

(require 'smtpmail)

(setq message-send-mail-function 'smtpmail-send-it
      starttls-use-gnutls t
      smtpmail-starttls-credentials '(("smtp.gmail.com" 587 nil nil))
      smtpmail-auth-credentials
      '(("smtp.gmail.com" 587 "julian.grove@gmail.com" nil))
      smtpmail-default-smtp-server "smtp.gmail.com"
      smtpmail-smtp-server "smtp.gmail.com"
      smtpmail-smtp-service 587)

(setq message-kill-buffer-on-exit t)

(setq mu4e-view-show-images t
      mu4e-view-image-max-width 800)

(defun no-auto-fill ()
  "Turn off auto-fill-mode."
  (auto-fill-mode -1))

(add-hook 'mu4e-compose-mode-hook #'no-auto-fill)

(add-to-list 'mm-inhibit-file-name-handlers 'openwith-file-handler)

;; latex
(setq-default TeX-PDF-mode t)
(setq-default TeX-master t)
(setq latex-run-command "pdflatex")
(setq TeX-command-extra-options "-shell-escape")
(setq shift-select-mode t)
(setq TeX-parse-self t)			; Enable parse on load.
(setq TeX-auto-save t)			; Enable parse on save.
(setq latex-run-command "pdflatex")
(setq TeX-command-extra-options "-shell-escape")
(setq TeX-view-program-selection '((output-pdf "PDF Viewer")))

;; Zathura as latex pdf viewer
(setq TeX-view-program-list '(("Zathura" "zathura %u")))

(add-hook 'LaTeX-mode-hook '(lambda ()
                  (add-to-list 'TeX-expand-list
                       '("%u" pdf-make-url))))
(defun pdf-make-url () (concat
               "file://\""
               (expand-file-name (funcall file (TeX-output-extension) t)
                         (file-name-directory (TeX-master-file)))
               "\"#src:"
               (TeX-current-line)
	       "\""
               (expand-file-name (TeX-master-directory))
               "./"
               (TeX-current-file-name-master-relative)
	       "\""))
(setq TeX-view-program-selection '((output-pdf "Zathura")))

;; flycheck
(use-package flycheck
  :init (global-flycheck-mode))

;; (setq flycheck-command-wrapper-function
        ;; (lambda (command) (apply 'nix-shell-command (nix-current-sandbox) command))
      ;; flycheck-executable-find
        ;; (lambda (cmd) (nix-executable-find (nix-current-sandbox) cmd)))

;; haskell
(require 'haskell-mode)
(custom-set-variables '(haskell-process-type 'cabal-repl))
(require 'haskell-interactive-mode)
(require 'haskell-process)
(custom-set-variables
 '(haskell-process-suggest-remove-import-lines t)
 '(haskell-process-auto-import-loaded-modules t)
 '(haskell-process-log t))
(add-hook 'haskell-mode-hook 'interactive-haskell-mode)
(use-package dante
  :after haskell-mode
  :commands 'dante-mode
  :init
  (add-hook 'haskell-mode-hook 'flymake-mode)
  (add-hook 'haskell-mode-hook 'dante-mode))
(setq dante-debug '(inputs outputs responses))
(setq dante-repl-command-line '("nix-shell" "--run" "cabal repl"))

;; ocaml
(autoload 'merlin-mode "merlin" "Merlin mode" t)
(add-hook 'tuareg-mode-hook 'merlin-mode)
(add-hook 'caml-mode-hook 'merlin-mode)
(add-hook 'merlin-mode-hook #'company-mode)

(use-package utop
  :config
  (autoload 'utop-minor-mode "utop" "Minor mode for utop" t)
  (add-hook 'tuareg-mode-hook 'utop-minor-mode))

;; coq
(add-hook 'coq-mode-hook 'coq-commenter-mode)

;; prolog
(setq auto-mode-alist (append '(("\\.pl\\'" . prolog-mode))
     auto-mode-alist))
(setq prolog-system 'swi)
(autoload 'run-prolog "pl" "Run an inferior prolog process" t)
(autoload 'prolog-mode "prolog" "SWI-Prolog mode" t)

;; python
(elpy-enable)

;; R
(require 'ess-r-mode)

;; org
(setq org-startup-truncated nil)

(global-set-key (kbd "C-c l") 'org-store-link)
(global-set-key (kbd "C-c a") 'org-agenda)
(global-set-key (kbd "C-c c") 'org-capture)

;; headers
(require 'org-bullets)
(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))

(let* ((headline `(:inherit default :weight bold)))
  (custom-theme-set-faces 'user
                          `(org-level-8 ((t (,@headline))))
                          `(org-level-7 ((t (,@headline))))
                          `(org-level-6 ((t (,@headline))))
                          `(org-level-5 ((t (,@headline))))
                          `(org-level-4 ((t (,@headline))))
                          `(org-level-3 ((t (,@headline))))
                          `(org-level-2 ((t (,@headline))))
                          `(org-level-1 ((t (,@headline))))
                          `(org-document-title ((t (,@headline :underline nil))))))

;; emphasis markers
(setq org-hide-emphasis-markers t)

;; bullets
(font-lock-add-keywords 'org-mode
                        '(("^ +\\([-*]\\) "
                           (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

;; org latex
(require 'ox-latex)
(require 'ox-beamer)
(add-to-list 'org-latex-classes
	     '("manuscript"
	       "\\documentclass[11pt,twoside]{article}
\\usepackage[margin=1.5in]{geometry}
\\usepackage{etoolbox}
\\ifundef{\\abstract}{}{\\patchcmd{\\abstract}%
  {\\quotation}{\\quotation\\noindent\\ignorespaces\\textbf{Abstract}\\hspace{1mm}}{}{}}
\\renewcommand{\\abstractname}{\\vspace{-1.4\\baselineskip}}
\\usepackage{lscape}
\\usepackage{titling}
\\usepackage{graphicx}
\\usepackage{amssymb}
\\usepackage{mathtools}
\\usepackage{amsthm}
\\theoremstyle{definition}
\\newtheorem{thm}{Theorem}
\\usepackage[inline]{enumitem}
\\usepackage{xcolor}
\\pagestyle{plain}
\\usepackage{libertine}
\\usepackage[varqu]{zi4}
\\usepackage[libertine]{newtxmath}
%%\\usepackage[small]{eulervm}
%%\\usepackage[{libertinust1math}
\\usepackage[T1]{fontenc}
%%\\usepackage[notextcomp,nosf]{kpfonts}
\\usepackage{tipa}
\\usepackage{tikz}
\\usetikzlibrary{fit}
\\usetikzlibrary{positioning}
\\usepackage{natbib}
\\usepackage{stmaryrd}
\\usepackage{fancyhdr}
\\pagestyle{fancy}
\\usepackage{sectsty}
\\usepackage{expex}
\\usepackage{stackrel}
\\usepackage{stackengine}
\\usepackage{relsize}
\\usepackage{fixltx2e}
\\raggedbottom
\\allsectionsfont{\\normalsize\\bfseries\\sffamily}
\\usepackage[colorlinks=true,urlcolor=blue!60!black!80,citecolor=blue!60!black!80,linkcolor=black,bookmarks,bookmarksopen,bookmarksdepth=2]{hyperref}
\\renewcommand\\UrlFont{\\normalsize}
\\usepackage[normalem]{ulem}
\\usepackage{appendix}
\\fancyfoot{}
\\fancyhead[LO]{\\footnotesize\\sf\\thetitle}
\\fancyhead[RE]{\\footnotesize\\sf\\theauthor}
\\fancyhead[LE,RO]{\\footnotesize\\sf\\thepage}
\\renewcommand{\\headrulewidth}{0pt}
\\pretitle{\\Large\\bfseries\\sffamily\\noindent}\\posttitle{\\par\\vskip 1em}
\\newcommand{\\affil}{\\vspace{-1em}}
\\preauthor{\\normalsize\\sf\\noindent\\lineskip 0.5em}\\postauthor{\\\\\\affil\\par\\vskip 1em}
\\predate{\\normalsize\\sf\\noindent}\\postdate{\\par\\vskip 1em}
\\bibliographystyle{li}
[NO-DEFAULT-PACKAGES]
[PACKAGES]
[EXTRA]"
	       ("\\section{%s}" . "\\section*{%s}")
	       ("\\subsection{%s}" . "\\subsection*{%s}")
	       ("\\subsubsection{%s}" . "\\subsubsection*{%s}")))
(add-to-list 'org-latex-classes
             '("slides"
               "\\documentclass[presentation]{beamer}
\\usepackage[T1]{fontenc}
\\setbeamerfont{frametitle}{size=\\large}
\\setbeamertemplate{footline}{
\\begin{flushright}
\\insertframenumber/\\inserttotalframenumber\\hspace{2mm}\\mbox{}
\\end{flushright}}
\\usepackage{libertine}
\\usepackage[varqu]{zi4}
\\usepackage[libertine]{newtxmath}
%%\\usepackage[small]{eulervm}
%%\\usepackage[{libertinust1math}
\\usepackage[T1]{fontenc}
\\renewcommand*\\familydefault{\\sfdefault}
\\usepackage{tipa}
\\usepackage{adjustbox}
\\usepackage{multirow}
\\usepackage{multicol}
\\usepackage{tikz}
\\usetikzlibrary{positioning}
\\usepackage{tikz-qtree}
\\usepackage{expex}
\\usepackage{natbib}
\\usepackage{stmaryrd}
\\usepackage{stackrel}
\\usepackage{stackengine}
\\usepackage{relsize}
\\usepackage{amsmath}
\\usepackage{mathtools}
\\usepackage{fixltx2e}
\\usepackage{graphicx}
\\usepackage{xcolor}
\\usepackage[normalem]{ulem}
\\bibliographystyle{li}
[NO-DEFAULT-PACKAGES]
[PACKAGES]
[EXTRA]"
               ("\\section{%s}" . "\\section*{%s}")
               ("\\subsection{%s}" . "\\subsection*{%s}")
               ("\\subsubsection{%s}" . "\\subsubsection*{%s}")))
(add-to-list 'org-latex-classes
	     '("abstract"
	       "\\documentclass[12pt,letterpaper]{article}
\\usepackage[margin=1in]{geometry}
\\usepackage{etoolbox}
\\usepackage{lscape}
\\usepackage{titling}
\\usepackage{titlesec}
\\usepackage{graphicx}
\\usepackage{amssymb}
\\usepackage{mathtools}
\\usepackage{amsthm}
\\theoremstyle{definition}
\\newtheorem{thm}{Theorem}
\\usepackage[inline]{enumitem}
\\usepackage{xcolor}
\\pagestyle{plain}
\\usepackage[T1]{fontenc}
\\usepackage{MinionPro}
\\usepackage{tipa}
\\usepackage{tikz}
\\usetikzlibrary{fit}
\\usetikzlibrary{positioning}
\\usepackage{natbib}
\\usepackage{stmaryrd}
\\usepackage{expex}
\\usepackage{stackrel}
\\usepackage{stackengine}
\\usepackage{relsize}
\\usepackage{fixltx2e}
\\raggedbottom
\\usepackage[colorlinks=true,urlcolor=blue!60!black!80,citecolor=blue!60!black!80,linkcolor=black,bookmarks,bookmarksopen,bookmarksdepth=2]{hyperref}
\\renewcommand\\UrlFont{\\normalsize}
\\renewcommand{\\maketitle}{\\normalsize\\begin{center}\\textbf{\\thetitle}\\end{center}\\vspace{-5mm}}
\\titleformat{\\section}[runin]{\\normalfont\\bfseries}{}{0pt}{}\\titlespacing{\\section}{0pt}{*0.5}{\\wordsep}
\\usepackage[normalem]{ulem}
\\bibliographystyle{li}
\\usepackage{bibentry}
[NO-DEFAULT-PACKAGES]
[PACKAGES]
[EXTRA]"
	       ("\\section{%s}" . "\\section*{%s}")
	       ("\\subsection{%s}" . "\\subsection*{%s}")
	       ("\\subsubsection{%s}" . "\\subsubsection*{%s}")))
(add-to-list 'org-latex-classes
	     '("review"
	       "\\documentclass[12pt,twoside]{article}
\\usepackage[margin=1.2in]{geometry}
\\usepackage{etoolbox}
\\ifundef{\\abstract}{}{\\patchcmd{\\abstract}%
  {\\quotation}{\\quotation\\noindent\\ignorespaces\\textbf{Abstract}\\hspace{1mm}}{}{}}
\\renewcommand{\\abstractname}{\\vspace{-1.4\\baselineskip}}
\\usepackage{lscape}
\\usepackage{titling}
\\usepackage{graphicx}
\\usepackage{amssymb}
\\usepackage{mathtools}
\\usepackage{amsthm}
\\theoremstyle{definition}
\\newtheorem{thm}{Theorem}
\\usepackage[inline]{enumitem}
\\usepackage{xcolor}
\\pagestyle{plain}
\\usepackage{libertine}
\\usepackage[varqu]{zi4}
\\usepackage[libertine]{newtxmath}
%%\\usepackage[small]{eulervm}
%%\\usepackage[{libertinust1math}
\\usepackage[T1]{fontenc}
%%\\usepackage[notextcomp,nosf]{kpfonts}
\\usepackage{tipa}
\\usepackage{tikz}
\\usetikzlibrary{fit}
\\usetikzlibrary{positioning}
\\usepackage{natbib}
\\usepackage{stmaryrd}
\\usepackage{sectsty}
\\usepackage{expex}
\\usepackage{stackrel}
\\usepackage{stackengine}
\\usepackage{relsize}
\\usepackage{fixltx2e}
\\raggedbottom
\\allsectionsfont{\\normalsize}
\\usepackage[colorlinks=true,urlcolor=blue!60!black!80,citecolor=blue!60!black!80,linkcolor=black,bookmarks,bookmarksopen,bookmarksdepth=2]{hyperref}
\\renewcommand\\UrlFont{\\normalsize}
\\usepackage[normalem]{ulem}
\\usepackage{appendix}
\\bibliographystyle{li}
[NO-DEFAULT-PACKAGES]
[PACKAGES]
[EXTRA]"
	       ("\\section{%s}" . "\\section*{%s}")
	       ("\\subsection{%s}" . "\\subsection*{%s}")
	       ("\\subsubsection{%s}" . "\\subsubsection*{%s}")))
(setq org-latex-pdf-process
      '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
	"bibtex %b"
	"pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
	"pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))
(setq org-latex-listings 'minted)

(require 'org-ref)

(require 'ox-bibtex)

;; org-gcal
(setq org-agenda-files (list "~/.emacs.d/gcal.org"))

(require 'json)
(defun get-gcal-config-value (key)
  (cdr (assoc key (json-read-file "~/.emacs.d/gcal-secret.json"))))

(require 'org-gcal)
(setq org-gcal-client-id (get-gcal-config-value 'client_id)
      org-gcal-client-secret (get-gcal-config-value 'client_secret)
      org-gcal-file-alist '(("juliangrove@gmail.com" . "~/.emacs.d/gcal.org")))

(defun my-org-gcal-fetch (&optional arg)
  (interactive "P")
  (let ((browse-url-browser-function #'browse-url-firefox))
        (org-gcal-fetch)))

(add-hook 'org-agenda-mode-hook (lambda () (org-gcal-sync)))
(add-hook 'org-capture-after-finalize-hook (lambda () (org-gcal-sync)))

(setq org-capture-templates
'(("a" "Appointment" entry (file  "~/.emacs.d/gcal.org")
"* %?\n\n%^T\n\n:PROPERTIES:\n\n:END:\n\n")))

;; org-agenda
(setq org-agenda-files (list "~/.emacs.d/gcal.org"))

;; calfw
(require 'calfw)
(require 'calfw-org)
(require 'calfw-gcal)

(defun schedule ()
  (interactive)
  (cfw:open-org-calendar))

(set-frame-font "DejaVu Sans Mono-12")
(setq default-frame-alist '((font . "DejaVu Sans Mono-12")))

;; dired
(require 'all-the-icons)
(use-package dired-sidebar
  :bind (("M-d" . dired-sidebar-toggle-sidebar)))

(define-key dired-mode-map "." #'dired-hide-dotfiles-mode)

(use-package dired-subtree
  :config
  (bind-keys :map dired-mode-map
             ("SPC" . dired-icons-subtree-toggle)))

(defun dired-icons-subtree-toggle ()
  (interactive)
  (dired-subtree-toggle)
  (revert-buffer))

(add-hook 'dired-mode-hook
      (lambda ()
        (dired-hide-details-mode)
        (dired-hide-dotfiles-mode)))
(add-hook 'dired-mode-hook 'all-the-icons-dired-mode)

;; nixos
(require 'nix-mode)
(add-to-list 'auto-mode-alist '("\\.nix\\'" . nix-mode))
(add-hook 'nix-mode-hook 'nixpkgs-fmt-on-save-mode)
(define-key nix-mode-map (kbd "C-c C-f") 'nixpkgs-fmt)

;; direnv
(require 'direnv)

;; pdf viewer
(pdf-loader-install)
(add-hook 'TeX-after-compilation-finished-functions #'TeX-revert-document-buffer)

;; markdown
(use-package markdown-mode
  :commands (markdown-mode gfm-mode)
  :mode (("README\\.md\\'" . gfm-mode)
         ("\\.md\\'" . markdown-mode)
         ("\\.markdown\\'" . markdown-mode))
  :init (setq markdown-command "multimarkdown"))

;; octave
;; (require 'ac-octave)
;; (add-hook 'octave-mode-hook
;;           '(lambda () (ac-octave-setup)))

;; agda
(use-package agda2-mode
  :mode ("\\.agda\\'" "\\.lagda.md\\'")
  :config
  (setq agda2-change-default-font nil)
  (setq agda2-fontset-name nil)
  (setq agda2-program-args '("-l" "standard-library" "-i.")) ;; new way to load libraries. -i. allows to look for the current dir (otherwise nothing can be loaded.)
  ;; (setq agda2-program-args (list (concat "--include-path=" (expand-file-name "~/.nix-profile/share/agda/"))))
  ;; taken care of by nixpkgs (load-file (let ((coding-system-for-read 'utf-8)) (shell-command-to-string "agda-mode locate")))
  (progn ;; xref support
    (defun agda2--xref-backend () "agda2 xref backend." (when (eq major-mode 'agda2-mode) 'agda2))
    (cl-defmethod xref-backend-identifier-at-point ((_backend (eql agda2)))
      (point))
    
    (cl-defmethod xref-backend-identifier-completion-table ((_backend (eql agda2)))
      nil)
    
    (cl-defmethod xref-backend-definitions ((_backend (eql agda2)) source-pos)
      (let* ((target (get-text-property source-pos 'annotation-goto))
             (fname (car target))
             (buf (get-file-buffer fname))
             (pnt (cdr target)))
        (list (xref-make "definiton" (xref-make-buffer-location buf pnt)))))
    
    (add-hook 'xref-backend-functions 'agda2--xref-backend)))
