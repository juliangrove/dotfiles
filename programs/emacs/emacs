(require 'package)
(add-to-list 'package-archives '("gnu" . "http://elpa.gnu.org/packages/"))
(add-to-list 'package-archives '("org" . "https://orgmode.org/elpa/") t)
(add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/") t)
(add-to-list 'package-archives '("melpa-stable" . "http://stable.melpa.org/packages/") t)
(let* ((no-ssl (and (memq system-type '(windows-nt ms-dos))
                    (not (gnutls-available-p))))
       (proto (if no-ssl "http" "https")))
  (add-to-list 'package-archives
               (cons "melpa" (concat proto "://melpa.org/packages/")) t))
(package-initialize)

(require 'xclip)
(xclip-mode 1)

(menu-bar-mode -1)
(tool-bar-mode -1)
(defun my/disable-scroll-bars (frame)
  (modify-frame-parameters frame
                           '((vertical-scroll-bars . nil)
                             (horizontal-scroll-bars . nil))))
(add-hook 'after-make-frame-functions 'my/disable-scroll-bars)

(cua-mode 1)

(setq split-width-threshold 1)

(load-theme 'gruvbox t)

(require 'airline-themes)
(load-theme 'airline-gruvbox-dark t)

(setq column-number-mode t)

(require 'evil)
(evil-mode 1)

(global-linum-mode t)
(add-hook 'pdf-view-mode-hook (lambda() (linum-mode -1)))

;; mu4e
(require 'mu4e)

(setq mail-user-agent 'mu4e-user-agent)

(global-set-key (kbd "C-M-v") 'mu4e-conversation-toggle-view)

(setq mu4e-maildir "~/.mail")

(setq mu4e-drafts-folder "/gmail/drafts")
(setq mu4e-sent-folder "/gmail/sent")
(setq mu4e-trash-folder "/gmail/trash")

(setq mu4e-sent-messages-behavior 'delete)
(setq mu4e-get-mail-command "mbsync -a")

(setq
  user-mail-address "julian.grove@gmail.com"
  user-full-name "Julian Grove"
  mu4e-compose-signature
  (concat "Julian Grove\n"
	  "julian.grove@gmail.com\n"
	  "juliangrove.github.io\n"
	  "sent via mu4e"))

(require 'smtpmail)

(setq message-send-mail-function 'smtpmail-send-it
      starttls-use-gnutls t
      smtpmail-starttls-credentials '(("smtp.gmail.com" 587 nil nil))
      smtpmail-auth-credentials
      '(("smtp.gmail.com" 587 "julian.grove@gmail.com" nil))
      smtpmail-default-smtp-server "smtp.gmail.com"
      smtpmail-smtp-server "smtp.gmail.com"
      smtpmail-smtp-service 587)

(setq message-kill-buffer-on-exit t)

(setq mu4e-view-show-images t
      mu4e-view-image-max-width 800)

(defun no-auto-fill ()
  "Turn off auto-fill-mode."
  (auto-fill-mode -1))

(add-hook 'mu4e-compose-mode-hook #'no-auto-fill)

(setq mu4e-user-mail-address-list '("julian.grove@gmail.com" "juliangrove@gmail.com" "juliang@uchicago.edu"))
(setq mu4e-compose-dont-reply-to-self t)

(setq-default TeX-PDF-mode t)
(setq-default TeX-master t)
(setq latex-run-command "pdflatex")
(setq TeX-command-extra-options "-shell-escape")
(setq shift-select-mode t)
(setq TeX-parse-self t)			; Enable parse on load.
(setq TeX-auto-save t)			; Enable parse on save.
(setq latex-run-command "pdflatex")
(setq TeX-command-extra-options "-shell-escape")
(setq TeX-view-program-selection '((output-pdf "PDF Viewer")))
;; Zathura
(setq TeX-view-program-list '(("Zathura" "zathura %u")))

(add-hook 'LaTeX-mode-hook '(lambda ()
                  (add-to-list 'TeX-expand-list
                       '("%u" pdf-make-url))))
(defun pdf-make-url () (concat
               "file://\""
               (expand-file-name (funcall file (TeX-output-extension) t)
                         (file-name-directory (TeX-master-file)))
               "\"#src:"
               (TeX-current-line)
	       "\""
               (expand-file-name (TeX-master-directory))
               "./"
               (TeX-current-file-name-master-relative)
	       "\""))
(setq TeX-view-program-selection '((output-pdf "Zathura")))

;; (require 'flycheck)

(require 'haskell-mode)
;; (require 'nix-haskell-mode)
;; (add-hook 'haskell-mode-hook 'nix-haskell-mode)
(add-hook 'haskell-mode-hook 'interactive-haskell-mode)

;; open .v files with Proof General's Coq mode
(add-hook 'coq-mode-hook 'coq-commenter-mode)

(setq auto-mode-alist (append '(("\\.pl\\'" . prolog-mode))
     auto-mode-alist))
(setq prolog-system 'swi)
(autoload 'run-prolog "pl" "Run an inferior prolog process" t)
(autoload 'prolog-mode "prolog" "SWI-Prolog mode" t)

(defvar caml-annot-dir nil)

;; elpy
(elpy-enable)

;; org
(global-set-key (kbd "C-c l") 'org-store-link)
(global-set-key (kbd "C-c a") 'org-agenda)
(global-set-key (kbd "C-c c") 'org-capture)

;; org-gcal
(setq org-agenda-files (list "~/Documents/org/gcal/gcal.org"))

(require 'json)
(defun get-gcal-config-value (key)
  (cdr (assoc key (json-read-file "~/.emacs.d/gcal-secret.json"))))

(require 'org-gcal)
(setq org-gcal-client-id (get-gcal-config-value 'client_id)
      org-gcal-client-secret (get-gcal-config-value 'client_secret)
      org-gcal-file-alist '(("juliangrove@gmail.com" . "~/Documents/org/gcal/gcal.org")))

(defun my-org-gcal-fetch (&optional arg)
  (interactive "P")
  (let ((browse-url-browser-function #'browse-url-firefox))
        (org-gcal-fetch)))

(add-hook 'org-agenda-mode-hook (lambda () (org-gcal-sync)))
(add-hook 'org-capture-after-finalize-hook (lambda () (org-gcal-sync)))

(setq org-capture-templates
'(("a" "Appointment" entry (file  "~/Documents/org/gcal/gcal.org")
"* %?\n\n%^T\n\n:PROPERTIES:\n\n:END:\n\n")))

;; org-agenda
(setq org-agenda-files (list "~/Documents/org/gcal/gcal.org"))

;; calfw
(require 'calfw)
(require 'calfw-org)
(require 'calfw-gcal)

(defun schedule ()
(interactive)
(cfw:open-org-calendar))

(set-default-font "Monospace-12")
(setq default-frame-alist '((font . "Monospace-12")))

;; dired
(require 'all-the-icons)
(use-package dired-sidebar
  :bind (("M-d" . dired-sidebar-toggle-sidebar)))

(define-key dired-mode-map "." #'dired-hide-dotfiles-mode)

(use-package dired-subtree
  :config
  (bind-keys :map dired-mode-map
             ("SPC" . dired-icons-subtree-toggle)))

(defun dired-icons-subtree-toggle ()
  (interactive)
  (dired-subtree-toggle)
  (revert-buffer))

(add-hook 'dired-mode-hook
      (lambda ()
        (dired-hide-details-mode)
        (dired-hide-dotfiles-mode)))
(add-hook 'dired-mode-hook 'all-the-icons-dired-mode)

;; pdf viewer
(pdf-loader-install)
(add-hook 'TeX-after-compilation-finished-functions #'TeX-revert-document-buffer)
